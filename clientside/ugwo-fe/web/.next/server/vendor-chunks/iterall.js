"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/iterall";
exports.ids = ["vendor-chunks/iterall"];
exports.modules = {

/***/ "(ssr)/./node_modules/iterall/index.js":
/*!***************************************!*\
  !*** ./node_modules/iterall/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nexports.isIterable = isIterable;\nexports.isArrayLike = isArrayLike;\nexports.isCollection = isCollection;\nexports.getIterator = getIterator;\nexports.getIteratorMethod = getIteratorMethod;\nexports.createIterator = createIterator;\nexports.forEach = forEach;\nexports.isAsyncIterable = isAsyncIterable;\nexports.getAsyncIterator = getAsyncIterator;\nexports.getAsyncIteratorMethod = getAsyncIteratorMethod;\nexports.createAsyncIterator = createAsyncIterator;\nexports.forAwaitEach = forAwaitEach;\n\nvar SYMBOL = typeof Symbol === 'function' ? Symbol : void 0;\n\nvar SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator;\n\nvar $$iterator = exports.$$iterator = SYMBOL_ITERATOR || '@@iterator';\n\nfunction isIterable(obj) {\n  return !!getIteratorMethod(obj);\n}\n\nfunction isArrayLike(obj) {\n  var length = obj != null && obj.length;\n  return typeof length === 'number' && length >= 0 && length % 1 === 0;\n}\n\nfunction isCollection(obj) {\n  return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj));\n}\n\nfunction getIterator(iterable) {\n  var method = getIteratorMethod(iterable);\n  if (method) {\n    return method.call(iterable);\n  }\n}\n\nfunction getIteratorMethod(iterable) {\n  if (iterable != null) {\n    var method = SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR] || iterable['@@iterator'];\n    if (typeof method === 'function') {\n      return method;\n    }\n  }\n}\n\nfunction createIterator(collection) {\n  if (collection != null) {\n    var iterator = getIterator(collection);\n    if (iterator) {\n      return iterator;\n    }\n    if (isArrayLike(collection)) {\n      return new ArrayLikeIterator(collection);\n    }\n  }\n}\n\nfunction ArrayLikeIterator(obj) {\n  this._o = obj;\n  this._i = 0;\n}\n\nArrayLikeIterator.prototype[$$iterator] = function () {\n  return this;\n};\n\nArrayLikeIterator.prototype.next = function () {\n  if (this._o === void 0 || this._i >= this._o.length) {\n    this._o = void 0;\n    return { value: void 0, done: true };\n  }\n  return { value: this._o[this._i++], done: false };\n};\n\nfunction forEach(collection, callback, thisArg) {\n  if (collection != null) {\n    if (typeof collection.forEach === 'function') {\n      return collection.forEach(callback, thisArg);\n    }\n    var i = 0;\n    var iterator = getIterator(collection);\n    if (iterator) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        callback.call(thisArg, step.value, i++, collection);\n\n        if (i > 9999999) {\n          throw new TypeError('Near-infinite iteration.');\n        }\n      }\n    } else if (isArrayLike(collection)) {\n      for (; i < collection.length; i++) {\n        if (collection.hasOwnProperty(i)) {\n          callback.call(thisArg, collection[i], i, collection);\n        }\n      }\n    }\n  }\n}\n\nvar SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator;\n\nvar $$asyncIterator = exports.$$asyncIterator = SYMBOL_ASYNC_ITERATOR || '@@asyncIterator';\n\nfunction isAsyncIterable(obj) {\n  return !!getAsyncIteratorMethod(obj);\n}\n\nfunction getAsyncIterator(asyncIterable) {\n  var method = getAsyncIteratorMethod(asyncIterable);\n  if (method) {\n    return method.call(asyncIterable);\n  }\n}\n\nfunction getAsyncIteratorMethod(asyncIterable) {\n  if (asyncIterable != null) {\n    var method = SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR] || asyncIterable['@@asyncIterator'];\n    if (typeof method === 'function') {\n      return method;\n    }\n  }\n}\n\nfunction createAsyncIterator(source) {\n  if (source != null) {\n    var asyncIterator = getAsyncIterator(source);\n    if (asyncIterator) {\n      return asyncIterator;\n    }\n    var iterator = createIterator(source);\n    if (iterator) {\n      return new AsyncFromSyncIterator(iterator);\n    }\n  }\n}\n\nfunction AsyncFromSyncIterator(iterator) {\n  this._i = iterator;\n}\n\nAsyncFromSyncIterator.prototype[$$asyncIterator] = function () {\n  return this;\n};\n\nAsyncFromSyncIterator.prototype.next = function (value) {\n  return unwrapAsyncFromSync(this._i, 'next', value);\n};\n\nAsyncFromSyncIterator.prototype.return = function (value) {\n  return this._i.return ? unwrapAsyncFromSync(this._i, 'return', value) : Promise.resolve({ value: value, done: true });\n};\n\nAsyncFromSyncIterator.prototype.throw = function (value) {\n  return this._i.throw ? unwrapAsyncFromSync(this._i, 'throw', value) : Promise.reject(value);\n};\n\nfunction unwrapAsyncFromSync(iterator, fn, value) {\n  var step;\n  return new Promise(function (resolve) {\n    step = iterator[fn](value);\n    resolve(step.value);\n  }).then(function (value) {\n    return { value: value, done: step.done };\n  });\n}\n\nfunction forAwaitEach(source, callback, thisArg) {\n  var asyncIterator = createAsyncIterator(source);\n  if (asyncIterator) {\n    var i = 0;\n    return new Promise(function (resolve, reject) {\n      function next() {\n        asyncIterator.next().then(function (step) {\n          if (!step.done) {\n            Promise.resolve(callback.call(thisArg, step.value, i++, source)).then(next).catch(reject);\n          } else {\n            resolve();\n          }\n\n          return null;\n        }).catch(reject);\n\n        return null;\n      }\n      next();\n    });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaXRlcmFsbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLG9CQUFvQjtBQUNwQixtQkFBbUI7QUFDbkIseUJBQXlCO0FBQ3pCLHNCQUFzQjtBQUN0QixlQUFlO0FBQ2YsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4Qiw4QkFBOEI7QUFDOUIsMkJBQTJCO0FBQzNCLG9CQUFvQjs7QUFFcEI7O0FBRUE7O0FBRUEsaUJBQWlCLGtCQUFrQjs7QUFFbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixhQUFhLHVCQUF1QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxzQkFBc0IsdUJBQXVCOztBQUU3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEZBQTRGLDBCQUEwQjtBQUN0SDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxhQUFhO0FBQ2IsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Vnd28tZmUvLi9ub2RlX21vZHVsZXMvaXRlcmFsbC9pbmRleC5qcz85MzkyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5pc0l0ZXJhYmxlID0gaXNJdGVyYWJsZTtcbmV4cG9ydHMuaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbmV4cG9ydHMuaXNDb2xsZWN0aW9uID0gaXNDb2xsZWN0aW9uO1xuZXhwb3J0cy5nZXRJdGVyYXRvciA9IGdldEl0ZXJhdG9yO1xuZXhwb3J0cy5nZXRJdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kO1xuZXhwb3J0cy5jcmVhdGVJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yO1xuZXhwb3J0cy5mb3JFYWNoID0gZm9yRWFjaDtcbmV4cG9ydHMuaXNBc3luY0l0ZXJhYmxlID0gaXNBc3luY0l0ZXJhYmxlO1xuZXhwb3J0cy5nZXRBc3luY0l0ZXJhdG9yID0gZ2V0QXN5bmNJdGVyYXRvcjtcbmV4cG9ydHMuZ2V0QXN5bmNJdGVyYXRvck1ldGhvZCA9IGdldEFzeW5jSXRlcmF0b3JNZXRob2Q7XG5leHBvcnRzLmNyZWF0ZUFzeW5jSXRlcmF0b3IgPSBjcmVhdGVBc3luY0l0ZXJhdG9yO1xuZXhwb3J0cy5mb3JBd2FpdEVhY2ggPSBmb3JBd2FpdEVhY2g7XG5cbnZhciBTWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nID8gU3ltYm9sIDogdm9pZCAwO1xuXG52YXIgU1lNQk9MX0lURVJBVE9SID0gU1lNQk9MICYmIFNZTUJPTC5pdGVyYXRvcjtcblxudmFyICQkaXRlcmF0b3IgPSBleHBvcnRzLiQkaXRlcmF0b3IgPSBTWU1CT0xfSVRFUkFUT1IgfHwgJ0BAaXRlcmF0b3InO1xuXG5mdW5jdGlvbiBpc0l0ZXJhYmxlKG9iaikge1xuICByZXR1cm4gISFnZXRJdGVyYXRvck1ldGhvZChvYmopO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHtcbiAgdmFyIGxlbmd0aCA9IG9iaiAhPSBudWxsICYmIG9iai5sZW5ndGg7XG4gIHJldHVybiB0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBsZW5ndGggPj0gMCAmJiBsZW5ndGggJSAxID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc0NvbGxlY3Rpb24ob2JqKSB7XG4gIHJldHVybiBPYmplY3Qob2JqKSA9PT0gb2JqICYmIChpc0FycmF5TGlrZShvYmopIHx8IGlzSXRlcmFibGUob2JqKSk7XG59XG5cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yKGl0ZXJhYmxlKSB7XG4gIHZhciBtZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gIGlmIChtZXRob2QpIHtcbiAgICByZXR1cm4gbWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKSB7XG4gIGlmIChpdGVyYWJsZSAhPSBudWxsKSB7XG4gICAgdmFyIG1ldGhvZCA9IFNZTUJPTF9JVEVSQVRPUiAmJiBpdGVyYWJsZVtTWU1CT0xfSVRFUkFUT1JdIHx8IGl0ZXJhYmxlWydAQGl0ZXJhdG9yJ107XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBtZXRob2Q7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yKGNvbGxlY3Rpb24pIHtcbiAgaWYgKGNvbGxlY3Rpb24gIT0gbnVsbCkge1xuICAgIHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGNvbGxlY3Rpb24pO1xuICAgIGlmIChpdGVyYXRvcikge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXlMaWtlSXRlcmF0b3IoY29sbGVjdGlvbik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEFycmF5TGlrZUl0ZXJhdG9yKG9iaikge1xuICB0aGlzLl9vID0gb2JqO1xuICB0aGlzLl9pID0gMDtcbn1cblxuQXJyYXlMaWtlSXRlcmF0b3IucHJvdG90eXBlWyQkaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5cbkFycmF5TGlrZUl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fbyA9PT0gdm9pZCAwIHx8IHRoaXMuX2kgPj0gdGhpcy5fby5sZW5ndGgpIHtcbiAgICB0aGlzLl9vID0gdm9pZCAwO1xuICAgIHJldHVybiB7IHZhbHVlOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxuICByZXR1cm4geyB2YWx1ZTogdGhpcy5fb1t0aGlzLl9pKytdLCBkb25lOiBmYWxzZSB9O1xufTtcblxuZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICBpZiAoY29sbGVjdGlvbiAhPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uLmZvckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uLmZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpO1xuICAgIH1cbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoY29sbGVjdGlvbik7XG4gICAgaWYgKGl0ZXJhdG9yKSB7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBzdGVwLnZhbHVlLCBpKyssIGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIGlmIChpID4gOTk5OTk5OSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05lYXItaW5maW5pdGUgaXRlcmF0aW9uLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgZm9yICg7IGkgPCBjb2xsZWN0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBjb2xsZWN0aW9uW2ldLCBpLCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgU1lNQk9MX0FTWU5DX0lURVJBVE9SID0gU1lNQk9MICYmIFNZTUJPTC5hc3luY0l0ZXJhdG9yO1xuXG52YXIgJCRhc3luY0l0ZXJhdG9yID0gZXhwb3J0cy4kJGFzeW5jSXRlcmF0b3IgPSBTWU1CT0xfQVNZTkNfSVRFUkFUT1IgfHwgJ0BAYXN5bmNJdGVyYXRvcic7XG5cbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgcmV0dXJuICEhZ2V0QXN5bmNJdGVyYXRvck1ldGhvZChvYmopO1xufVxuXG5mdW5jdGlvbiBnZXRBc3luY0l0ZXJhdG9yKGFzeW5jSXRlcmFibGUpIHtcbiAgdmFyIG1ldGhvZCA9IGdldEFzeW5jSXRlcmF0b3JNZXRob2QoYXN5bmNJdGVyYWJsZSk7XG4gIGlmIChtZXRob2QpIHtcbiAgICByZXR1cm4gbWV0aG9kLmNhbGwoYXN5bmNJdGVyYWJsZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXN5bmNJdGVyYXRvck1ldGhvZChhc3luY0l0ZXJhYmxlKSB7XG4gIGlmIChhc3luY0l0ZXJhYmxlICE9IG51bGwpIHtcbiAgICB2YXIgbWV0aG9kID0gU1lNQk9MX0FTWU5DX0lURVJBVE9SICYmIGFzeW5jSXRlcmFibGVbU1lNQk9MX0FTWU5DX0lURVJBVE9SXSB8fCBhc3luY0l0ZXJhYmxlWydAQGFzeW5jSXRlcmF0b3InXTtcbiAgICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG1ldGhvZDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNJdGVyYXRvcihzb3VyY2UpIHtcbiAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgdmFyIGFzeW5jSXRlcmF0b3IgPSBnZXRBc3luY0l0ZXJhdG9yKHNvdXJjZSk7XG4gICAgaWYgKGFzeW5jSXRlcmF0b3IpIHtcbiAgICAgIHJldHVybiBhc3luY0l0ZXJhdG9yO1xuICAgIH1cbiAgICB2YXIgaXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvcihzb3VyY2UpO1xuICAgIGlmIChpdGVyYXRvcikge1xuICAgICAgcmV0dXJuIG5ldyBBc3luY0Zyb21TeW5jSXRlcmF0b3IoaXRlcmF0b3IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBBc3luY0Zyb21TeW5jSXRlcmF0b3IoaXRlcmF0b3IpIHtcbiAgdGhpcy5faSA9IGl0ZXJhdG9yO1xufVxuXG5Bc3luY0Zyb21TeW5jSXRlcmF0b3IucHJvdG90eXBlWyQkYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcblxuQXN5bmNGcm9tU3luY0l0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB1bndyYXBBc3luY0Zyb21TeW5jKHRoaXMuX2ksICduZXh0JywgdmFsdWUpO1xufTtcblxuQXN5bmNGcm9tU3luY0l0ZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX2kucmV0dXJuID8gdW53cmFwQXN5bmNGcm9tU3luYyh0aGlzLl9pLCAncmV0dXJuJywgdmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHsgdmFsdWU6IHZhbHVlLCBkb25lOiB0cnVlIH0pO1xufTtcblxuQXN5bmNGcm9tU3luY0l0ZXJhdG9yLnByb3RvdHlwZS50aHJvdyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5faS50aHJvdyA/IHVud3JhcEFzeW5jRnJvbVN5bmModGhpcy5faSwgJ3Rocm93JywgdmFsdWUpIDogUHJvbWlzZS5yZWplY3QodmFsdWUpO1xufTtcblxuZnVuY3Rpb24gdW53cmFwQXN5bmNGcm9tU3luYyhpdGVyYXRvciwgZm4sIHZhbHVlKSB7XG4gIHZhciBzdGVwO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBzdGVwID0gaXRlcmF0b3JbZm5dKHZhbHVlKTtcbiAgICByZXNvbHZlKHN0ZXAudmFsdWUpO1xuICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogc3RlcC5kb25lIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmb3JBd2FpdEVhY2goc291cmNlLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICB2YXIgYXN5bmNJdGVyYXRvciA9IGNyZWF0ZUFzeW5jSXRlcmF0b3Ioc291cmNlKTtcbiAgaWYgKGFzeW5jSXRlcmF0b3IpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIGFzeW5jSXRlcmF0b3IubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgICAgICBpZiAoIXN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgc3RlcC52YWx1ZSwgaSsrLCBzb3VyY2UpKS50aGVuKG5leHQpLmNhdGNoKHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIG5leHQoKTtcbiAgICB9KTtcbiAgfVxufVxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/iterall/index.js\n");

/***/ })

};
;